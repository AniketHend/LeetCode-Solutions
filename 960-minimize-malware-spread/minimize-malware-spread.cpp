#include <bits/stdc++.h>
using namespace std;

static const int _ = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();

#ifdef ONLINE_JUDGE
#include "./debug.h"
#define dbg(...)                                                               \
    cerr << __LINE__ << " :: ", _DEBUG_UTIL_::printer(#__VA_ARGS__, __VA_ARGS__)
#define dbgA(arr, n)                                                           \
    cerr << __LINE__ << " :: ", _DEBUG_UTIL_::printerArr(#arr, arr, n)
#else
#define dbg(x...)
#define dbgA(arr, n)
#endif

#define ff first
#define ss second
#define All(x) (x).begin(), (x).end()
#define Allr(x) (x).rbegin(), (x).rend()
#define sz(x) static_cast<int>(x.size())
#define vi vector<int>
#define pi pair<int, int>
typedef long long ll;
typedef long double ld;

const int mod = 1000000007; // 1000000007 998244353
const ll inf = 1e18;

template <typename Func> class FUN_res {
    Func func_;
public:
    template <typename T>
    explicit FUN_res(T&& func) : func_(std::forward<T>(func)) {}
    template <typename... Args> decltype(auto) operator()(Args&&... args) {
        return func_(std::ref(*this), std::forward<Args>(args)...);
    }
};
template <typename Func> decltype(auto) FUN(Func&& func) {
    return FUN_res<std::decay_t<Func>>(std::forward<Func>(func));
}

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& a, vector<int>& b) {
        ll n = sz(a);
        vector<set<int>> v(n);
        vector<ll> vis(n);
        vector<ll> cvis(n);
        auto dfs = FUN([&](const auto & f, ll u, ll p, ll s)->void {
            v[u].insert(s);
            vis[u] = 1;
            cvis[u]=1;
            for (int i = 0; i < n; i++) {
                if (a[u][i] == 1 && i != p && u != i && !cvis[i]) {
                    f(i, u, s);
                }
            }
        });

        for (auto i : b) {
            cvis.assign(n,0);
            dfs(i, i, i);
        }
        // for(auto i:v) {
        //     for(auto j:i)cout<<j<<" ";
        //     cout<<endl;
        // }
        sort(All(b));
        ll ans = count(All(vis), 1);
        // cout<<ans<<endl;
        ll sa = INT_MAX,index=0;
        int j=0;
        for (auto i : b) {
            ll cans = ans;
            for (int j = 0; j < n; j++) {
                if (sz(v[j]) == 1 && (*v[j].begin()) == i) {
                    cans--;
                }
            }
            // cout<<cans<<" ";
            if(sa>cans) {
                sa=cans;
                index=i;
            }
            j++;
        }
        return index;
    }
};
void solve() {
    // dbg(Solution().findAllPeople);
}

#ifdef LOCAL
int32_t main() { solve(); }
#endif